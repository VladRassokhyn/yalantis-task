{"version":3,"sources":["reducers/employeesReducer.ts","store.ts","pages/MonthItem.tsx","pages/EmployeesBirthList.tsx","actions/emploeesActions.ts","pages/EmployeeItem.tsx","pages/AlphaItem.tsx","pages/EmployeesList.tsx","castomUseSelector.ts","api/api.ts","pages/EmployeesPage.tsx","api/thunks.ts","index.tsx"],"names":["initialState","rootReducers","combineReducers","employees","state","action","type","newState","payload","map","employee","active","Boolean","window","localStorage","getItem","id","sort","a","b","lastName","charCodeAt","setItem","String","store","createStore","applyMiddleware","thunk","MonthItem","month","className","moment","dob","format","EmployeesBirthList","months","nextMonths","concat","slice","monthEmployees","filter","length","setEmployees","setActive","EmployeeItem","dispatch","useDispatch","style","color","firstName","checked","onChange","AlphaItem","char","EmployeesList","useSelector","untypedSelector","instance","axios","create","baseURL","EmployeesAPI","get","EmployeesPage","useEffect","data","console","log","message","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7cf12541.chunk.js","sourcesContent":["import { Reducer } from 'redux';\nimport { TEmployees, TEmployeesActions } from '../types';\n\nconst initialState: TEmployees[] = [];\n\nexport const employeesReducer: Reducer<TEmployees[], TEmployeesActions> = (\n  state = initialState,\n  action,\n) => {\n  switch (action.type) {\n    case 'SET_EMPLOYEES':\n      const newState = [\n        ...state,\n        ...action.payload.map(employee => {\n          employee.active = Boolean(window.localStorage.getItem(employee.id));\n          return employee;\n        }),\n      ];\n      return newState.sort(\n        (a, b) => a.lastName.charCodeAt(0) - b.lastName.charCodeAt(0),\n      );\n\n    case 'ACTIVE_TOGGLE':\n      return [\n        ...state.map(employee => {\n          if (employee.id === action.id) {\n            const active = !employee.active;\n            window.localStorage.setItem(employee.id, String(active));\n            return { ...employee, active };\n          } else {\n            return employee;\n          }\n        }),\n      ];\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport { employeesReducer } from './reducers/employeesReducer';\nimport thunk from 'redux-thunk';\n\nconst rootReducers = combineReducers({\n  employees: employeesReducer,\n});\n\ntype RootReducersType = typeof rootReducers;\nexport type GlobalStateType = ReturnType<RootReducersType>;\n\nexport const store = createStore(rootReducers, applyMiddleware(thunk));\n","import React from 'react';\r\nimport { TEmployees } from '../types';\r\nimport moment from 'moment';\r\n\r\nexport const MonthItem: React.FC<{ employees: TEmployees[]; month: string }> =\r\n  ({ employees, month }) => {\r\n    return (\r\n      <div className={'month-item-wrapper'}>\r\n        <h2>{month}</h2>\r\n        {employees.map(employee => {\r\n          return (\r\n            <li key={employee.id}>\r\n              {employee.lastName} -{' '}\r\n              {moment(employee.dob).format('D MMMM, YYYY')} year\r\n            </li>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  };\r\n","import moment from 'moment';\r\nimport React from 'react';\r\nimport { TEmployees } from '../types';\r\nimport { MonthItem } from './MonthItem';\r\n\r\nexport const EmployeesBirthList: React.FC<{ employees: TEmployees[] }> = ({\r\n  employees,\r\n}) => {\r\n  const months = moment.months();\r\n  const nextMonths = months\r\n    .concat(months.slice(0, moment().month()))\r\n    .slice(-12);\r\n\r\n  return (\r\n    <div className={'employees-birth-list-wrapper'}>\r\n      <div className={'months-wrapper'}>\r\n        {nextMonths.map(month => {\r\n          let monthEmployees = employees.filter(\r\n            employee => moment(employee.dob).format('MMMM') === month,\r\n          );\r\n          if (monthEmployees.length !== 0) {\r\n            return (\r\n              <MonthItem key={month} month={month} employees={monthEmployees} />\r\n            );\r\n          } else return null;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { TActiveToggle, TEmployees, TSetEmpoyees } from '../types';\n\nexport const setEmployees = (payload: TEmployees[]): TSetEmpoyees => ({\n  type: 'SET_EMPLOYEES',\n  payload,\n});\n\nexport const setActive = (id: string): TActiveToggle => ({\n  type: 'ACTIVE_TOGGLE',\n  id,\n});\n","import React from 'react';\r\nimport { TEmployees } from '../types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setActive } from '../actions';\r\n\r\nexport const EmployeeItem: React.FC<{ employee: TEmployees }> = ({\r\n  employee,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className={'employee-item-wrapper'}>\r\n      <h3 style={{ color: employee.active ? 'blue' : 'black' }}>\r\n        {employee.lastName} {employee.firstName}\r\n      </h3>\r\n      <span>\r\n        <input\r\n          type={'radio'}\r\n          checked={employee.active}\r\n          onChange={() => dispatch(setActive(employee.id))}\r\n        />\r\n        <label>active</label>\r\n      </span>\r\n      <span>\r\n        <input\r\n          type={'radio'}\r\n          checked={!employee.active}\r\n          onChange={() => dispatch(setActive(employee.id))}\r\n        />\r\n        <label>not active</label>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { TEmployees } from '../types';\r\nimport { EmployeeItem } from './EmployeeItem';\r\n\r\nexport const AlphaItem: React.FC<{ char: string; employees: TEmployees[] }> = ({\r\n  char,\r\n  employees,\r\n}) => {\r\n  return (\r\n    <div className={'alpha-item-wrapper'}>\r\n      <h2>{char}</h2>\r\n      {employees.length === 0 && '-----'}\r\n      {employees.map(employee => (\r\n        <EmployeeItem key={employee.id} employee={employee} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { TEmployees } from '../types';\r\nimport { AlphaItem } from './AlphaItem';\r\n\r\nexport const EmployeesList: React.FC<{ employees: TEmployees[] }> = ({\r\n  employees,\r\n}) => {\r\n  const alphabet = [\r\n    'A',\r\n    'B',\r\n    'C',\r\n    'D',\r\n    'E',\r\n    'F',\r\n    'G',\r\n    'H',\r\n    'I',\r\n    'J',\r\n    'K',\r\n    'L',\r\n    'M',\r\n    'N',\r\n    'O',\r\n    'P',\r\n    'Q',\r\n    'R',\r\n    'S',\r\n    'T',\r\n    'U',\r\n    'V',\r\n    'W',\r\n    'X',\r\n    'Y',\r\n    'Z',\r\n  ];\r\n\r\n  return (\r\n    <div className={'employees-list-wrapper'}>\r\n      {alphabet.map(char => {\r\n        return (\r\n          <AlphaItem\r\n            key={char}\r\n            char={char}\r\n            employees={employees.filter(\r\n              employee => employee.lastName[0] === char,\r\n            )}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import {\n  TypedUseSelectorHook,\n  useSelector as untypedSelector,\n} from 'react-redux';\nimport { GlobalStateType } from './store';\n\nexport const useSelector: TypedUseSelectorHook<GlobalStateType> =\n  untypedSelector;\n","import axios, { AxiosResponse } from 'axios';\nimport { TEmployees } from '../types';\n\nconst instance = axios.create({\n  baseURL: `https://yalantis-react-school-api.yalantis.com/api/`,\n});\n\nexport const EmployeesAPI = {\n  getEmployees(): Promise<AxiosResponse<TEmployees[]>> {\n    return instance.get<TEmployees[]>('task0/users');\n  },\n};\n","import React, { useEffect } from 'react';\r\nimport { EmployeesBirthList } from './EmployeesBirthList';\r\nimport { EmployeesList } from './EmployeesList';\r\nimport { GlobalStateType } from '../store';\r\nimport { useSelector } from '../castomUseSelector';\r\nimport { getEmployees } from '../api';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport const EmployeesPage = () => {\r\n  const dispatch = useDispatch();\r\n  const { employees } = useSelector<GlobalStateType>(state => ({\r\n    employees: state.employees,\r\n  }));\r\n\r\n  useEffect(() => {\r\n    dispatch(getEmployees());\r\n  }, []);\r\n\r\n  return (\r\n    <div className={'wrapper'}>\r\n      <h1>Employees</h1>\r\n      <h1>Employees birthday</h1>\r\n      <EmployeesList employees={employees} />\r\n      <EmployeesBirthList\r\n        employees={[...employees.filter(employee => employee.active)]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { EmployeesAPI } from './api';\nimport { Dispatch } from 'react';\nimport { TSetEmpoyees } from '../types';\nimport { setEmployees } from '../actions';\n\nexport const getEmployees = () => {\n  return async (dispatch: Dispatch<TSetEmpoyees>) => {\n    try {\n      const payload = await EmployeesAPI.getEmployees();\n      dispatch(setEmployees(payload.data));\n    } catch (err) {\n      console.log(err.message);\n    }\n  };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport { EmployeesPage } from './pages';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <EmployeesPage />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}